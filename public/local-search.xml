<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>在Windows上使用VMware配置一台Ubuntu虚拟机</title>
    <link href="/2022/10/20/ubuntuvirtualmachine/"/>
    <url>/2022/10/20/ubuntuvirtualmachine/</url>
    
    <content type="html"><![CDATA[<!-- 标题1-#已经被上面使用，故从2级标题开始 --><h2 id="大纲">大纲</h2><ol type="1"><li>语言汉化，重启，汉化时区，更新软件源</li><li>输入法ibus-拼音</li><li>虚拟机重启蓝屏问题</li><li>clash外网，写脚本，配置好了还要重启</li><li>总结：蜜汁重启，解决一切问题</li><li>GitHub登陆，还是蜜汁重启</li><li>vscode自动补全提示功能，在Windows中可能有问题，但Linux没有</li><li>百度网盘空间同步？</li><li>修改下自动补全提示的快捷键？(已完成)</li><li>ubuntu商店中的vscode居然不支持中文(无语)</li></ol>]]></content>
    
    
    <categories>
      
      <category>Article</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ML-Lec1AndLec2</title>
    <link href="/2022/03/26/ML-Lec1AndLec2/"/>
    <url>/2022/03/26/ML-Lec1AndLec2/</url>
    
    <content type="html"><![CDATA[<!-- 标题1-#已经被上面使用，故从2级标题开始 --><h2 id="写在前面">写在前面</h2><p>不知不觉中，大三生活已经加载完了近3/4，让我在间歇性堕落中略感惶恐。有些无用的忙碌也让人厌恶。生活不易，且行且停，在大三的闲暇时刻，花点时间把之前学过的一些课程总结一下，或许也是一件美事。想来想去，先从自己<s>最擅长</s>(bushi)或者说还记得最多的课程开始，因此便有了这个机器学习课堂笔记。希望我能在1个月内更完。哈哈！</p><p>( •̀ ω •́ )y</p><h2 id="关于课堂">关于课堂</h2><p>zuel《机器学习》由统数学院蒋锋教授开设，使用教材为周志华《机器学习》。考虑到学生理解能力有限，他在48学时的课程里只教授了一些简单的概念性知识，课堂作业为使用相关算法的实验报告。时间紧，任务重，想拿到高分并不容易。</p><p>在学习这门课的过程中，我最大的收获是1个月入门R语言，熟悉使用Rmarkdown进行文本编辑写作。在折腾中知道了Latex、tidy verse、datatable等有趣的东西，自娱自乐，一度成为R吹。但是现在我还是主要使用Python，可能<s>有点初恋情结</s>(bushi)。在调用机器学习算法包进行实践时，R or Python都有其一套完善的workflow，二者精其一即可。当然都熟悉是最好的。</p><p>上课期间，印象最深的事情就是，有节课教室里都是水！当时大教室漏雨，整个地面都是水，我拿着西瓜书，踩着拖鞋，端着五食堂的绿茶，吧唧吧唧地趟着水喝着茶，从教室前走到教室后，然后慢悠悠地开始上课。感觉那节课是湿的，但是讲的都是干货，在那样的课堂上好有意思！</p><h2 id="nfl定理">NFL定理</h2><p>一二节课自古以来都比较水，《机器学习》自然不能免俗。除了交代了机器学习中一些比较重要的基础概念，重点1就是No Free Lunch Theorem(NFL，没有免费午餐定理)。</p><p>NFL定理最重要的寓意，就是让我们清楚地认识到，脱离具体问题或者数据，空泛地谈论“什么学习算法更好”毫无意义。因为若考虑所有潜在的问题，所有学习算法都一样好。</p><p>下面我们来简单证明一下(参见西瓜书P8)。</p><p>为简单起见，假设样本空间<span class="math inline">\(\mathcal{X}\)</span>和假设空间<span class="math inline">\(\mathcal{H}\)</span>都是离散的。令<span class="math inline">\(P(h|X,\mathfrak{L}_a)\)</span>代表学习算法<span class="math inline">\(\mathfrak{L}_a\)</span>基于训练数据<span class="math inline">\(X\)</span>产生假设<span class="math inline">\(h\)</span>的概率(这里的<span class="math inline">\(h\)</span>说白了就是由数据拟合出来的，一个模拟真实目标函数的逼近函数)，再令<span class="math inline">\(f\)</span>代表我们希望学习的真实目标函数。<span class="math inline">\(\mathfrak{L}_a)\)</span>的“训练集外误差”，即<span class="math inline">\(\mathfrak{L}_a)\)</span>在训练集之外的所有样本上的误差(out of train set error?)为</p><center><p><img src="/img/ML-Lec1AndLec2/eq1.png"  /></p></center><!-- $$E_{ote}(\mathfrak{L}_a|X,f) = \sum_h \sum_{x \in \mathcal{X}-X} P(\textit{\textbf{x}}) II(h(\textit{\textbf{x}}) \not = f(\textit{\textbf{x}})) P(h|X,\mathfrak{L}_a),$$ --><p>其中<span class="math inline">\(II(\cdot)\)</span>是指示函数，若<span class="math inline">\(\cdot\)</span>为真则取值1，否则取值0。</p><p>考虑二分类问题，且真实目标函数可以是任何函数<span class="math inline">\(\mathcal{X} \mapsto \{0,1\}\)</span>，函数空间为<span class="math inline">\(\{0,1\}^{|\mathcal{X}|}\)</span>。对所有可能的<span class="math inline">\(f\)</span>按均匀分布对误差求和，有</p><center><p><img src="/img/ML-Lec1AndLec2/eq2.png"  /></p></center><!-- $$\begin{align*}\sum_{f} E_{ote}(\mathfrak{L}_a|X,f) &= \sum_h \sum_{x \in \mathcal{X}-X} P(\textit{\textbf{x}}) II(h(\textit{\textbf{x}}) \not = f(\textit{\textbf{x}})) P(h|X,\mathfrak{L}_a) \\&= \sum_{x \in \mathcal{X}-X}P(\textit{\textbf{x}}) \sum_hP(h|X,\mathfrak{L}_a) \sum_fII(h(\textit{\textbf{x}}) \not = f(\textit{\textbf{x}}))   \quad (环，可交换次序)\\&= \sum_{x \in \mathcal{X}-X}P(\textit{\textbf{x}}) \sum_hP(h|X,\mathfrak{L}_a) \frac{1}{2}2^|\mathcal{X}| \\& \quad (h(\textit{\textbf{x}}) \not = f(\textit{\textbf{x}}): f有\{0,1\}^{|\mathcal{X}|}也即是2^{|\mathcal{X}|}个，结果不等的一半，也就是\frac{1}{2})\\&=\frac{1}{2}2^|\mathcal{X}|\sum_{x \in \mathcal{X}-X}P(\textit{\textbf{x}}) \sum_hP(h|X,\mathfrak{L}_a) \\& \quad (\sum_h P(h|X,\mathfrak{L}_a)=1，所有假设概率为1)\\&=2^{|\mathcal{X}|-1}\sum_{x \in \mathcal{X}-X}P(\textit{\textbf{x}}) \cdot 1\\& \quad (没有出现a，即结果与算法\mathfrak{L}_a无关)\\\end{align*}$$  --><p>上式显示出，总误差与学习算法无关(与<span class="math inline">\(II(\cdot)\)</span>无关)。即对于任意两个学习算法<span class="math inline">\(\mathfrak{L}_a\)</span>和<span class="math inline">\(\mathfrak{L}_b\)</span>，我们都有</p><p><span class="math display">\[\sum_{f} E_{ote}(\mathfrak{L}_a|X,f)=\sum_{f} E_{ote}(\mathfrak{L}_b|X,f)\]</span></p><p>也就是说，无论学习算法<span class="math inline">\(\mathfrak{L}_a\)</span>多聪明、学习算法<span class="math inline">\(\mathfrak{L}_b\)</span>多笨拙，它们的期望性能是相同的。</p><h2 id="偏差方差分解定理">偏差方差分解定理</h2><p>关于各种评价指标、ROC曲线啥的，个人觉得根据任务选择合适的评价指标即可。所以直接跳过，记录一下第二个重点——偏差方差分解定理。</p><p><s>公式推导好长！</s></p><p>偏差-方差分解试图对学习算法的期望泛化错误率进行拆解。我们知道，算法在不同训练集上学得的结果很可能不同，即便这些训练集是来自同一个分布。对测试样本<span class="math inline">\(x\)</span>，令<span class="math inline">\(y_D\)</span>为<span class="math inline">\(x\)</span>在数据集中的标记，<span class="math inline">\(y\)</span>为<span class="math inline">\(x\)</span>的真实标记，<span class="math inline">\(f(x;D)\)</span>为训练集<span class="math inline">\(D\)</span>上学得的模型<span class="math inline">\(f\)</span>在<span class="math inline">\(x\)</span>上的预测输出。以回归任务为例，学习算法的期望预测为</p><p><span class="math display">\[\bar{f}(x) = \mathbb{E}_D[f(x;D)], \qquad (2.37)\]</span></p><hr /><p>tips:数据产生时有可能出现噪声使得<span class="math inline">\(y_D \not = y\)</span>，<span class="math inline">\(x\)</span>应该是加粗的向量，打不出来，md</p><hr /><p>使用样本数相同的不同训练集产生的方差为</p><p><span class="math display">\[var(x) = \mathbb{E}_D[(f(x;D)-\bar{f}(x))^2] \qquad (2.38)\]</span></p><p>噪声为</p><p><span class="math display">\[\epsilon^2 = \mathbb{E}_D[(y_D-y)^2]. \qquad (2.39)\]</span></p><p>期望输出与真实标记的差别称为偏差(bias)，即</p><p><span class="math display">\[bias^2(x)=(\bar{f}(x)-y)^2 \qquad (2.40)\]</span></p><p>为便于讨论，假定噪声期望为零，即有<span class="math inline">\(\mathbb{E}_D[y_D-y]=0\)</span>。通过<s>简单的</s>多项式展开合并，可对算法的期望泛化误差进行分解：</p><center><p><img src="/img/ML-Lec1AndLec2/eq3.png"  /> <img src="/img/ML-Lec1AndLec2/eq4.png"  /> <img src="/img/ML-Lec1AndLec2/eq5.png"  /> <img src="/img/ML-Lec1AndLec2/eq6.png"  /></p></center><p>于是乎，</p><p><span class="math display">\[E(f;D) = bias^2(x)+var(x)+\epsilon^2 \qquad (2.42)\]</span></p><p>偏差(2.40)度量了学习算法的期望预测与真是结果的偏离程度，即刻画了学习算法本身的拟合能力；方差(2.38)度量了同样大小的训练集的变动所导致的学习性能的变化，即刻画了数据扰动所造成的影响；噪声(2.39)则表达了在当前任务上任何学习算法所能达到的期望泛化误差的下界，即刻画了学习问题本身的难度(数据是否垃圾、质量不高，即数据观测记录与真实有差距，不准确，这时候算法就会在垃圾上得到垃圾)</p><p>那么我们如何缓解偏差-方差窘境呢？一般的做法是采用AutomaticDriven的方法（剪枝、正则等等）。此外我们还可以增加样本数目（理论泛化误差的上界与样本数目有关，样本数目越多则泛化误差越小，当样本数目趋于无穷时，误差也将趋于0），以及选择合适的样本（不同的算法对于样本分布存在不同的偏好）缓解偏差-方差窘境（然而这种方法在现实问题中很难被采用）。</p>]]></content>
    
    
    <categories>
      
      <category>Article</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MachineLearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>what is nn?</title>
    <link href="/2022/03/22/what-is-nn/"/>
    <url>/2022/03/22/what-is-nn/</url>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p><span class="math inline">\(\quad\)</span>这篇blog的题目是What is NN? 很浮夸，是吧。一篇文章怎么能说清NN？(因为我也没打算说清楚，哈哈。)不过，NN是一个神奇的东西，它极具魅力，吸引着当下百分之九十的数据科学家和数据分析爱好者(包括我在内)。无论是写论文还是做项目，若不言NN，很容易被许多伪数据科学爱好者嗤之以鼻。因此，在现实的需求和洪流面前，我又不得不去看它。</p><p><span class="math inline">\(\quad\)</span>从大二寒假开始，我就一直在看NN。无奈当时太年轻(当然现在依旧是，哈哈)，找到了邱锡鹏的《nndl-book》就开始大读特读。读了20多页，全是：</p><center><p><img src="/img/MathAboutNN/nike.jpg" width="400" /></p></center><p><span class="math inline">\(\quad\)</span>但现在，学了《机器学习》《回归分析》《多元统计分析》等专业课，被统计专业一群大佬老师熏陶了这么久。我感觉初窥了NN的门径，有必要写点什么记录一下近期的思考。题目很大，就叫《What is NN?》，哈哈。</p><h2 id="nn">NN</h2><p><span class="math inline">\(\quad\)</span>如果你问我，你觉得机器学习是什么？我可能会回答："机器学习就是函数逼近。"邱锡鹏在《nndl-book》这本书里阐述道："通俗地讲，机器学习（Machine Learning，ML）就是让计算机从数据中进行自动学习，得到某种知识（或规律）。"在我看来，这种知识或者规律，其最直观的体现就是我们通过数据训练出来的映射函数<span class="math inline">\(y(label) = f(X)\)</span>。</p><p><span class="math inline">\(\quad\)</span>邱在《nndl-book》的第二章阐述了机器学习方法的三个基本要素：模型、学习准则、优化算法。NN作为一种现代的机器学习方法，自然也逃不开这个研究的基本范式。本文将主要关注NN的模型构造和理解，如若对后两者感兴趣请参阅邱锡鹏《神经网络与深度学习》。</p><h2 id="定义">定义</h2><p><span class="math inline">\(\quad\)</span>前馈神经网络(or多层感知机)是最早发明的人工神经网络，也是我们理解NN的基础。</p><center><p><img src="/img/MathAboutNN/cover.jpg" alt="前馈神经网络" /></p></center><p><span class="math inline">\(\quad\)</span>上图给出了一个前馈神经网络的示例。另外，我们再定义一些描述前馈神经网络的记号。</p><table><caption>前馈神经网络的记号</caption><thead><tr class="header"><th>记号</th><th>含义</th></tr></thead><tbody><tr class="odd"><td><span class="math inline">\(L\)</span></td><td>神经网络的层数</td></tr><tr class="even"><td><span class="math inline">\(M_l\)</span></td><td>第<span class="math inline">\(l\)</span>层神经元的个数</td></tr><tr class="odd"><td><span class="math inline">\(f_l(·)\)</span></td><td>第<span class="math inline">\(l\)</span>层神经元的激活函数</td></tr><tr class="even"><td><span class="math inline">\(W^{(l)} \in \mathbb{R}^{M_l \times M_{l-1}}\)</span></td><td>第<span class="math inline">\(𝑙 − 1\)</span>层到第<span class="math inline">\(l\)</span>层的权重矩阵</td></tr><tr class="odd"><td><span class="math inline">\(b^{(l)} \in \mathbb{R}^{M_l}\)</span></td><td>第<span class="math inline">\(𝑙 − 1\)</span>层到第<span class="math inline">\(l\)</span>层的偏置</td></tr><tr class="even"><td><span class="math inline">\(z^{(l)} \in \mathbb{R}^{M_l}\)</span></td><td>第<span class="math inline">\(l\)</span>层神经元的净输入(净活性值)</td></tr><tr class="odd"><td><span class="math inline">\(a^{(l)} \in \mathbb{R}^{M_l}\)</span></td><td>第<span class="math inline">\(l\)</span>层神经元的输出(活性值)</td></tr></tbody></table><p><span class="math inline">\(\quad\)</span>令<span class="math inline">\({a}^{(0)} = {x},\quad(a,x \quad are \quad vectors)\)</span>，前馈神经网络通过不断迭代下面公式进行信息传播：</p><p><span class="math display">\[\begin{align*}\begin{cases}z^{(l)} &amp;= W^{(l)} {a}^{(l-1)} + b^{(l)} \\{a}^{(l)} &amp;= f_l(z^{(l)})\end{cases}\end{align*}\]</span></p><p><span class="math inline">\(\quad\)</span>即首先根据第<span class="math inline">\(l-1\)</span>层Neuron的活性值(Activation,就是经过<span class="math inline">\(l-1\)</span>层的激活函数激活后的值)<span class="math inline">\(a^{(l-1)}\)</span>计算出第<span class="math inline">\(l\)</span>层Neuron的净活性值<span class="math inline">\(z^{(l)}\)</span>。然后经过一个激活函数(实则就是sigmoid/ReLu等非线性变换)得到第<span class="math inline">\(l\)</span>层神经元的活性值。</p><p><span class="math inline">\(\quad\)</span>因此，我们也可以将每个神经层看作一个仿射变换(通过一个线性变换和平移/偏置)和一个非线性变换。</p><p><span class="math inline">\(\quad\)</span>我们可以将上面的公式改写成：</p><p><span class="math display">\[\begin{align*}\begin{cases}活性值版：&amp; a^{(l)}&amp;=f_l(W^{(l)} {a}^{(l-1)} + b^{(l)})\\净活性值版：&amp; z^{(l)}&amp;=W^{(l)}f_{l-1}(z^{(l-1)})+b^{(l)}\end{cases}\end{align*}\]</span></p><h2 id="解读">解读</h2><h3 id="q1nn示意图中圆圈的含义是">Q1:NN示意图中圆圈的含义是？</h3><p><span class="math inline">\(\quad\)</span>我的理解是它们象征着净输入的各个分量或者说维度。一个圆圈代表该层输入的一个维度。</p><h3 id="q2nn示意图中连线的含义是">Q2:NN示意图中连线的含义是？</h3><p><span class="math inline">\(\quad\)</span>类比<strong>多因变量对多自变量的回归</strong>，单条连线指净输入某一维度/分量到下一层输入某一维度的变换。我们用<span class="math inline">\(\overrightarrow{x} = (x_1,x_2,\cdots,x_3)\)</span>表示某一层的净输入的话，再用<span class="math inline">\(\overrightarrow{y}_{(i)},w^T_{(i)},\overrightarrow{b}_{(i)}\)</span>分别表示该层变换输出(下一层输入)的第<span class="math inline">\(i\)</span>个维度、该层变换变换的权重矩阵第<span class="math inline">\(i\)</span>行、该层变换的偏置向量的第<span class="math inline">\(i\)</span>个分量，忽略非线性变换的步骤(毕竟只是一个外壳)，则单条连线象征的变换可表示为：</p><p><span class="math display">\[\overrightarrow{y}_{(i)}=w^T_{(i)} \overrightarrow{x}+\overrightarrow{b}_{(i)}\]</span></p><p><span class="math inline">\(\quad\)</span>在一本介绍PyTorch的书中，我看到了一些有趣的观点。</p><h3 id="q3仿射变换">Q3:仿射变换</h3><p><span class="math inline">\(\quad\)</span>深度学习的核心组件之一是仿射变换，仿射变换是一个关于矩阵<span class="math inline">\(A\)</span>和向量<span class="math inline">\(x,b\)</span>的<span class="math inline">\(f(x)\)</span>函数：</p><p><span class="math display">\[f(x) = Ax+b\]</span></p><p><span class="math inline">\(\quad\)</span>在大部分书中，我们都能看到神经网络一层中的仿射变换变换被表示成了：</p><p><span class="math display">\[W^{(l)}a^{(l-1)}+b^{(l)}\]</span></p><p><span class="math inline">\(\quad\)</span>实际上，可以写的“统计学”一些：</p><p><span class="math display">\[\begin{align*}a^{(l-1)}B^{(l)}+b^{(l)}\end{align*}\]</span></p><p><span class="math inline">\(\quad\)</span>这样做的好处就是可以更好理解为什么PyTorch在定义网络时，各层维度数字是首尾相连的。</p><h3 id="q4非线性变换">Q4:非线性变换</h3><p><span class="math inline">\(\quad\)</span>首先，注意以下这个例子，它将解释为什么我们一层NN需要非线性函数。假设我们有两个仿射变换<span class="math inline">\(f(x) = Ax+b\)</span> 和<span class="math inline">\(g(x) = Cx+d\)</span>。那么<span class="math inline">\(f(g(x))\)</span> 又是什么呢？</p><p><span class="math display">\[\begin{align*}f(g(x)) &amp;= A(Cx+d)+b \\&amp;= ACx + (Ad+b)\end{align*}\]</span></p><p><span class="math inline">\(\quad AC\)</span>是一个矩阵，<span class="math inline">\(Ad+b\)</span>是一个向量，可以看出，两个仿射变换的组合还是一个仿射变换。由此可以看出，使用以上方法将多个仿射变换组合成的长链式的神经网络，相对于单个仿射变换并没有性能上的提升。但是如果我们在两个仿射变换之间引入非线性，那么结果就大不一样了，我们可以构建出一个高性能的模型。</p><p><span class="math inline">\(\quad\)</span>最常用的核心的非线性函数有：<span class="math inline">\(tanh(x),\sigma(x),ReLU(x)\)</span>。你可能会想： “为什么是这些函数？明明有其他更多的非线性函数。”这些函数常用的原因是它们拥有可以容易计算的梯度，而<strong>计算梯度是学习的本质</strong>。例如:</p><p><span class="math display">\[\frac{d\sigma}{dx} = \sigma(x)(1-\sigma(x))\]</span></p><p>虽然<span class="math inline">\(\sigma(x)\)</span>是非线性的，但是当参数的绝对值增长时，它的梯度会很快消失。而小梯度意味着很难学习。因此大部分人默认选择<span class="math inline">\(tanh\)</span>或者<span class="math inline">\(ReLU\)</span>。</p>]]></content>
    
    
    <categories>
      
      <category>Article</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Math</tag>
      
      <tag>DeepLearning</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
